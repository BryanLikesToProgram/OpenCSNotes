UNIX/Linux
	Kernal written in C
	Graduate schools require Linux & Coding tests & interviews are often in UNIX
	Old but still powerful, backbone of internet
	
	Linux	
		Open source version of Unis
	UNIX	
		OS ceated in 1960's by Ken Thompson, Bell Labs.
		Many branches
			BSD (Berkeley Software Distribution)
			Linux
		General Charracteristics
			Multiuser & Multitasking	
				Now standard for mots OS'
			Over 40 years okd
				Plenty of documentation, examples, & source code
			Free applications & Os
				Opensource free software 
			Less Respurce Intensive
				Significantly less demaning on system resources than other OS'
			Most Servers run UNIX	
				Especially backbone Internet systems
		Flavors of UNIX
			Sun Solaris
			GNU/Linux
				Ubuntu used in the CS dept for server dev
			MacOS X
	Openstack
		Popular cloud computing project
		VM (Virtual Machine) used for CS216
			Always test on VM before submission for benefit of TA
		Dashboard
			Web interface used to access VM console
		OpenStack instance
			Term for VM
		Access
			use linkblue ID & password
			controller.netlab.uky.edu
			"Instances"
				instance name (linkblue ID)
				"Instance Console"
					enter linkblue ID & pass to continue
			PUTTY or other ssh software
				Hostname = linkblue id.netlab.uky.edu 
				Port: 22
					login as: linkblue ID
					password: type linkblue password (UNIX does not display characters in password field)
	Terminal 
		Default terminal is Bash	
		Shell
			Command line interpreter, reads user commands and executes them
			Iterpreter
				Compiles & Executes single commands at a time
				(Language interpreter at Olympics, repeats in English after primary announcer)
			Compiler 
				Compiles the whole program at once, executes once.
				(Reading translated transcript after the Olympic Event)
			~echo
				"~echo $SHELL"
				Display all arguments for: 
			~ps
				Print snapshot of current active procceses 
		Bash
			GNU shell (Bourne Again Shell) [sh]
				OG UNIX interpreter
			sh-compatable shell, incorporates features from Korn shell & C shell
			Follows IEEE standards
		Anatomy of terminal
			SOL@LAPTOP-NDHP9AK9:~$ pwd
			Prompt
				SOL@LAPTOP-NDHP9AK9:~$
				default prompt ends at $
				Editable
					change ps1 variable
					"echo $PS1"
						Shows current variable	
			Command
				pwd

	List of Ubuntu Commands
		~man x
			display manual of x program/command
			^d
				Scroll Down
			^u  Scroll Up
		~uname
				OS info 
				"uname -a"
					detailed info
		~pwd
			"Print working directory"
		~ls
			"List contents"
				-l
					"Long list"
					9 permission bits 
						d, r w x,  r w x, r w x,
						first 3 bits for owner, group, others, all users
						(read, write, execute)
		~mkdir
			"Make directory"
		~rmir
			"Remove directory"
		~rm
			"remove file"
			-r
				"and all of its contents"
		~cd
			"Change Directory"
		~cp
			"Copy File"
		~mv
			"move or rename file"
		~cat
			"Concat file & print output"
		~which
			"Print full path of command"
		~echo 
			"Write arugments to standard output"
		~exit
			"Exit login shell"
		~ chmod
			"Change mode bits of a file/directory"
			Changes the rwx [ls -l]
				u (+∨-) (r∧∨w∧∨x)
		~grep
			"pattern matching, prints lines matching a pattern"
			Global Regular Expression Print
				-i
					case insensitive search
				-n 
					prefix each line of output w/ the line number w/in its input file
				-w
					select only those lines containing matches that form whole words
		~sort
			-d 
				dictionary order
			-f	
				ignore case
			-k 
				key
				sort -k 2 (sorts according to second column of text)
		~ssh * (Server name)
			-l *
				login username
			-p *
				port to connect on remote host
			Escapes
				~? 
					List of escape characters
				~.
					Disconnec
		~scp 
			Copy files over ssh connection
			Local -> remote
				~scp *.file remoteuser@servername:/remote/directory/
			Remote -> local
				~scp remoteuser@servername:/remote/directory/*.file
			Remote -> different remote
				~scp remoteuser1@servername1:/remote/directory/*.file remoteuser2@servername2:/remote/directory/
			Specifying ports
				different program architecture from ssh
				-P *(port)
					must go BEFORE declairing username & server
						this is how scp decides which port applies to which remote host
	Bash Programming Tools
		Redirection 
			>
				'redirects std-out to file'
				creates a file if not present
				OVERWRITES files
			>>
				'appends std-out to file'
				creates a file if not present
				Appends files
			<
				'redirects std-in from file'
				open and read from file
		Piping
			|
				pass output from leftside | as input to right side
				ex: $ cat *.txt | sort -d
		File System
			Root/System
			Directory control
				'.'
					current directory
				'..' 
					1x higher directory
				'~' 
					home directory
			Absalute
				/home/user/project/*.file
			Relatve
				~/CS216, ./CS216
			Filename Wildcards
				* 
					o or more
				? exactly one character
		Text Editors
			Console
				Faster, more reliable & sustainable, especially over remote connections
			Graphical
				More, intuitive & user freindly
			Vim
				Console
				Standard Linux editor
				Usage
					Two modes
						Insertion mode (Text input)
							'i'
						Command mode (save, quit, copy, paste, etc...)
							':'
							':help'
				Pros					|Cons
				--------------------------------------------------
				Powerful				|Not user freindly	
			Emacs
				Console
				Expansiv
					
Regular Expressions (regex)
	pattern that defines a class of strings
	Grammar
		Alternation | (Or)
		Grouping () (Scope or & precedince)
		Quantification ?, *, +
			? (Zero or one) 
			*(Zero or more)
			+  (One or more)
		Matching 
			For use with a string, place inside quotations
				Ex. " ^Hello Wo*ld"
			. (a single character
			*(alny string)
			[a-zA-Z]
			[0-9]
			[^0-9]
			^ (Beginning of a string)
			$ (End of a string)
			\< \> (Beginning and end of a word)
		Special Characters
			Escape special characters w/ "\" (Otherwise terminal thinks you're calling it, not the regex expression)
